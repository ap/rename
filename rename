#!/usr/bin/env perl
use strict;
use warnings;

use Getopt::Long 2.24, qw( :config bundling no_ignore_case no_auto_abbrev );

my ( $EXT, @USE, $DECODE, $ENCODE );
sub compile { eval shift } # defined early to control the lexical environment

my $msglevel = 0;
sub ERROR (&) { print STDERR $_[0]->(), "\n" if $msglevel > -1 };
sub INFO  (&) { print STDERR $_[0]->(), "\n" if $msglevel >  0 };
sub DEBUG (&) { print STDERR $_[0]->(), "\n" if $msglevel >  1 };

sub pod2usage { require Pod::Usage;     goto &Pod::Usage::pod2usage }
sub mkpath    { require File::Path;     goto &File::Path::mkpath }
sub dirname   { require File::Basename; goto &File::Basename::dirname }

use constant VERB_FOR => {
	link => {
		inf   => 'link',
		pastp => 'linked',
		exec  => sub { link shift, shift },
	},
	symlink => {
		inf   => 'symlink',
		pastp => 'symlinked',
		exec  => sub { symlink shift, shift },
	},
	rename => {
		inf   => 'rename',
		pastp => 'renamed',
		exec  => sub { rename shift, shift },
	},
};

sub argv_to_subst_expr {
	my $modifier = shift || '';
	pod2usage( -verbose => 1 ) if @ARGV < 2;
	my ($from, $to) = map quotemeta, splice @ARGV, 0, 2;
	# the ugly \${\""} construct is necessary because unknown backslash escapes are
	# not treated the same in pattern- vs doublequote-quoting context; only the
	# latter lets us do the right thing with problematic input like
	# ']{ool(haracter$' or maybe '>><//((/>'
	sprintf 's/\Q${\"%s"}/%s/%s', $from, $to, $modifier;
}

sub pipe_through {
	my ( $cmd ) = @_;
	IPC::Open2::open2( my $in, my $out, $cmd ) or do {
		warn "couldn't open pipe to $cmd: $!\n";
		return;
	};
	print $out $_;
	close $out;
	$_ = <$in>;
	chomp;
	close $in;
}

my ( $VERB, @EXPR );
my $do_keep_ext;

my %library = (
	camelcase => 's/([[:alpha:]]+)/\u$1/g',
	urlesc    => 's/%([0-9A-F][0-9A-F])/chr hex $1/ieg',
	nows      => 's/[_[:blank:]]+/_/g',
	rews      => 'y/_/ /',
	noctrl    => 's/[_[:cntrl:]]+/_/g',
	nometa    => 'tr/_!"&()=?`*\';<>|$/_/s',
);

GetOptions(
	'h|help'                    => sub { pod2usage() },
	'man'                       => sub { pod2usage( -verbose => 2 ) },
	'0|null'                    => \my $opt_null,
	'f|force'                   => \my $opt_force,
	'g|glob'                    => \my $opt_glob,
	'i|interactive'             => \my $opt_interactive,
	'k|backwards|reverse-order' => \my $opt_backwards,
	'l|symlink'                 => sub { $VERB ? pod2usage( -verbose => 1 ) : ( $VERB = VERB_FOR->{ 'symlink' } ) },
	'L|hardlink'                => sub { $VERB ? pod2usage( -verbose => 1 ) : ( $VERB = VERB_FOR->{    'link' } ) },
	'M|use=s'                   => \@USE,
	'n|just-print|dry-run'      => \my $opt_dryrun,
	'p|mkpath|make-dirs'        => \my $opt_mkpath,
	't|sort-time'               => \my $opt_time_sort,
	'T|transcode=s'             => \my $opt_transcode,
	'v|verbose+'                => \$msglevel,

	'a|append=s'                => sub { push @EXPR, "\$_ .= qq[${\quotemeta $_[1]}]" },
	'A|prepend=s'               => sub { push @EXPR, "substr \$_, 0, 0, qq[${\quotemeta $_[1]}]" },
	'c|lower-case'              => sub { push @EXPR, 's/([[:upper:]]+)/\L$1/g' },
	'C|upper-case'              => sub { push @EXPR, 's/([[:lower:]]+)/\U$1/g' },
	'd|delete=s'                => sub { push @EXPR, "s/${\quotemeta $_[1]}//" },
	'D|delete-all=s'            => sub { push @EXPR, "s/${\quotemeta $_[1]}//g" },
	'e|expr=s'                  => \@EXPR,
	'P|pipe=s'                  => sub { require IPC::Open2; push @EXPR, "pipe_through '\Q$_[1]\E'" },
	's|subst'                   => sub { push @EXPR, argv_to_subst_expr },
	'S|subst-all'               => sub { push @EXPR, argv_to_subst_expr('g') },
	'x|remove-extension'        => sub { push @EXPR, 's/(\.[^.]+)\z//' },
	'X|keep-extension'          => sub { push @EXPR, 's/(\.[^.]+)\z// and substr $EXT, 0, 0, $1'; ++$do_keep_ext },
	'z|sanitize'                => sub { push @EXPR, @library{ qw( nows noctrl nometa ) } },

	map { my $recipe = $_; $recipe => sub { push @EXPR, $library{ $recipe } } } keys %library,
) or pod2usage();

$VERB ||= VERB_FOR->{ 'rename' };

if ( not @EXPR ) {
	pod2usage() if not @ARGV or -e $ARGV[0];
	push @EXPR, shift;
}

pod2usage( -message => 'Error: --null only permitted when reading filenames from STDIN' )
	if $opt_null and @ARGV;

pod2usage( -message => 'Error: --interactive and --force are mutually exclusive' )
	if $opt_interactive and $opt_force;

++$msglevel if $opt_dryrun;

my $code = do {
	if ( $do_keep_ext ) {
		unshift @EXPR, '$EXT = ""';
		push    @EXPR, 'substr $EXT, 0, 1, "" if not length; $_ .= $EXT';
	}

	if ( $opt_transcode ) {
		require Encode;
		my ( $in_enc, $out_enc ) = split /:/, $opt_transcode, 2;
		$DECODE = Encode::find_encoding( $in_enc );
		die "No such encoding $in_enc\n" if not ref $DECODE;
		$ENCODE = defined $out_enc ? Encode::find_encoding( $out_enc ) : $ENCODE;
		die "No such encoding $out_enc\n" if not ref $ENCODE;
		unshift @EXPR, '$_ = $DECODE->decode($_)';
		push    @EXPR, '$_ = $ENCODE->encode($_)';
	}

	my $i = $#USE;
	for ( reverse @USE ) {
		s/\A([^=]+)=?//;
		my $use = "use $1";
		$use .= ' split /,/, $USE['.$i--.']' if length;
		unshift @EXPR, $use;
	}

	my $cat = sprintf 'sub { %s }', join '; ', @EXPR;
	DEBUG { "Using expression: $cat" };

	my $evaled = compile $cat;
	die $@ if $@;
	die "Evaluation to subref failed. Check expression using -nv\n"
		unless 'CODE' eq ref $evaled;

	$evaled;
};

if ( !@ARGV ) {
	local $/ = $/;
	INFO { "Reading filenames from STDIN" };
	@ARGV = do {
		if ( $opt_null ) {
			INFO { "Splitting on NUL bytes" };
			$/ = chr 0;
		}
		<STDIN>;
	};
	chomp @ARGV;
}

@ARGV = map glob, @ARGV if $opt_glob;

if ( $opt_time_sort ) {
	my @mtime = map { (stat)[9] } @ARGV;
	@ARGV = @ARGV[ sort { $mtime[$a] <=> $mtime[$b] } 0 .. $#ARGV ];
}

@ARGV = reverse @ARGV if $opt_backwards;

for ( @ARGV ) {
	my $old = $_;

	$code->();

	if ( $old eq $_ ) {
		DEBUG { "'$old' unchanged" };
		next;
	}

	if ( !$opt_force and -e ) {
		ERROR { "'$old' not $VERB->{pastp}: '$_' already exists" };
		next;
	}

	if ( $opt_dryrun ) {
		INFO { "'$old' would be $VERB->{pastp} to '$_'" };
		next;
	}

	if ( $opt_interactive ) {
		print "\u$VERB->{inf} '$old' to '$_'? [n] ";
		if ( <STDIN> !~ /^y(?:es)?$/i ) {
			DEBUG { "Skipping '$old'." };
			next;
		}
	}

	my ( $success, @made_dirs );

	++$success if $VERB->{ 'exec' }->( $old, $_ );

	if ( !$success and $opt_mkpath ) {
		@made_dirs = mkpath( [ dirname( $_ ) ], $msglevel > 1, 0755 );
		++$success if $VERB->{ 'exec' }->( $old, $_ );
	}

	if ( !$success ) {
		ERROR { "Can't $VERB->{inf} '$old' to '$_': $!" };
		rmdir $_ for reverse @made_dirs;
		next;
	}

	INFO { "'$old' $VERB->{pastp} to '$_'" };
}

__END__

=head1 NAME

rename - renames multiple files

=head1 VERSION

version 1.500

=head1 SYNOPSIS

F<rename>
B<[switches|transforms]>
B<[files]>

Switches:

=over 1

=item B<-0>/B<--null> (when reading from STDIN)

=item B<-f>/B<--force>E<nbsp>orE<nbsp>B<-i>/B<--interactive> (proceed or prompt when overwriting)

=item B<-g>/B<--glob> (expand C<*> etc. in filenames, useful in Windows F<CMD.EXE>)

=item B<-k>/B<--backwards>/B<--reverse-order>

=item B<-l>/B<--symlink>E<nbsp>orE<nbsp>B<-L>/B<--hardlink>

=item B<-M>/B<--use=I<Module>>

=item B<-n>/B<--just-print>/B<--dry-run>

=item B<-p>/B<--mkpath>/B<--make-dirs>

=item B<-t>/B<--sort-time>

=item B<-T>/B<--transcode=I<encoding>>

=item B<-v>/B<--verbose>

=back

Transforms, applied sequentially:

=over 1

=item B<-a>/B<--append=I<str>>

=item B<-A>/B<--prepend=I<str>>

=item B<-c>/B<--lower-case>

=item B<-C>/B<--upper-case>

=item B<-d>/B<--delete=I<str>>

=item B<-D>/B<--delete-all=I<str>>

=item B<-e>/B<--expr=I<code>>

=item B<-P>/B<--pipe=I<cmd>>

=item B<-s>/B<--subst I<from> I<to>>

=item B<-S>/B<--subst-all I<from> I<to>>

=item B<-x>/B<--remove-extension>

=item B<-X>/B<--keep-extension>

=item B<-z>/B<--sanitize>

=item B<--camelcase>E<nbsp>B<--urlesc>E<nbsp>B<--nows>E<nbsp>B<--rews>E<nbsp>B<--noctrl>E<nbsp>B<--nometa> (see manual)

=back

=head1 DESCRIPTION

C<rename> renames the filenames supplied according to the rules specified. If a given filename is not modified, it will not be renamed. If no filenames are given on the command line, filenames will be read via standard input.

For example, to rename all files matching C<*.bak> to strip the extension, you might say

 rename 's/\.bak$//' *.bak

If you are confident that none of the filenames has C<.bak> anywhere else than at the end, you can also use the much easier typed

 rename -s .bak '' *.bak

You can always do multiple changes in one go:

 rename -s .tgz .tar.gz -s .tbz2 .tar.bz2 *.tar.*

Note however that transformational options are order sensitive. The following would probably surprise you:

 rename -s foo bar -s bar baz *

Since operations are cumulative, this would end up substituting (some of) the F<foo> matches in filenames with F<baz>! So pay attention to order. You may want to request a verbose dry run with C<-n> for the first stab at a complex rename operation.

 rename -n -s bar baz -s foo bar *

You can combine the various transformational options to suit your needs. F.ex files from Microsoft(tm) Windows systems often have blanks and (sometimes nothing but) capital letters in their names. Let's say you have a bunch of such files to clean up, and you also want to move them to subdirectories based on extension. The following command should help:

 rename -p -c -z -e '$_ = "$1/$_" if /(\..*)\z/' *

Again you need to pay attention to order sensitivity for transformational options. If you placed the C<-c> after the C<-e> in the above example, files with F<.zip> and F<.ZIP> extensions would be (attempted to be) moved to different directories because the directory name prefix would be added before the filenames were normalized. Once again, use verbose dry run requested using C<-nv> to get an idea of what exactly a complex rename operation is going to do.

=head1 OPTIONS

=head2 Switches

=over 4

=item B<-h>, B<--help>

See a synopsis.

=item B<--man>

Browse the manpage.

=item B<-0>, B<--null>

When reading file names from C<STDIN>, split on NUL bytes instead of newlines. This is useful in combination with GNU find's C<-print0> option, GNU grep's C<-Z> option, and GNU sort's C<-z> option, to name just a few. B<Only valid if no filenames have been given on the commandline.>

=item B<-f>, B<--force>

Rename even when a file with the destination name already exists.

=item B<-g>, B<--glob>

Glob filename arguments. This is useful if you're using a braindead shell such as F<cmd.exe> which won't expand wildcards on behalf of the user.

=item B<-i>, B<--interactive>

Ask the user to confirm every action before it is taken.

=item B<-k>, B<--backwards>, B<--reverse-order>

Process the list of files in reverse order, last file first. This prevents conflicts when renaming files to names which are currently taken but would be freed later during the process of renaming.

=item B<-l>, B<--symlink>

Create symlinks from the new names to the existing ones, instead of renaming the files. B<Cannot be used in conjunction with C<-L>.>

=item B<-L>, B<--hardlink>

Create hard links from the new names to the existing ones, instead of renaming the files. B<Cannot be used in conjunction with C<-l>.>

=item B<-M>, B<--use>

Like perl's own C<-M> switch. Loads the named modules at the beginning of the rename, and can pass import options separated by commata after an equals sign, i.e. C<Module=foo,bar> will pass the C<foo> and C<bar> import options to C<Module>.

You may load multiple modules by using this option multiple times.

=item B<-n>, B<--dry-run>, B<--just-print>

Show how the files would be renamed, but don't actually do anything.

=item B<-p>, B<--mkpath>, B<--make-dirs>

Create any non-existent directories in the target path. This is very handy if you want to scatter a pile of files into subdirectories based on some part of their name (eg. the first two letters or the extension): you don't need to make all necessary directories beforehand, just tell C<rename> to create them as necessary.

=item B<-T>, B<--transcode>

Decodes each filename before processing and encodes it after processing, according to the given encoding you supply.

To encode output in a different encoding than input was decoded, supply two encoding names, separated by a colon, e.g. C<-T latin1:utf-8>.

Only the last C<-T> parameter on the command line is effective.

=item B<-v>, B<--verbose>

Print additional information about the operations (not) executed.

=back

=head2 Transforms

Transforms are applied to filenames sequentially. You can use them multiple times; their effects will accrue.

=over 4

=item B<-a>, B<--append>

Append the string argument you supply to every filename.

=item B<-A>, B<--prepend>

Prepend the string argument you supply to every filename.

=item B<-c>, B<--lower-case>

Convert file names to all lower case.

=item B<-C>, B<--upper-case>

Convert file names to all upper case.

=item B<-e>, B<--expr>

The C<code> argument to this option should be a Perl expression that assumes the filename in the C<$_> variable and modifies it for the filenames to be renamed. When no other C<-c>, C<-C>, C<-e>, C<-s>, or C<-z> options are given, you can omit the C<-e> from infront of the code.

=item B<-P>, B<--pipe>

Pass the filename to an external command on its standard input and read back the transformed filename on its standard output.

=item B<-s>, B<--subst>

Perform a simple textual substitution of C<from> to C<to>. The C<from> and C<to> parameters must immediately follow the argument.

Quoting issues aside, this is equivalent to supplying a C<-e 's/\Qfrom/to/'>.

=item B<-S>, B<--subst-all>

Same as C<-s>, but replaces I<every> instance of the C<from> text by the C<to> text.

=item B<-x>, B<--remove-extension>

Remove the last extension from a filename, if there is any.

=item B<-X>, B<--keep-extension>

Save and remove the last extension from a filename, if there is any. The saved extension will be appended back to the filename at the end of the rest of the operations.

Repeating this option will save multiple levels of extension in the right order.

=item B<--camelcase>

Capitalise every separate word within the filename.

=item B<--urlesc>

Decode URL-escaped filenames, such as wget(1) used to produce.

=item B<--nows>

Replace all sequences of whitespace in the filename with single underscore characters.

=item B<--rews>

Reverse C<--nows>: replace each underscore in the filename with a space.

=item B<--noctrl>

Replace all sequences of control characters in the filename with single underscore characters.

=item B<--nometa>

Replace every shell meta-character by an underscore.

=back

=head1 COOKBOOK

Using the C<-M> switch, you can quickly put F<rename> to use for just about everything the CPAN offers:

=head3 Coarsely latinize a directory full of files with non-Latin characters

 rename -T utf8 -MText::Unidecode '$_ = unidecode $_' *

See L<Text::Unidecode>.

=head3 Sort a directory of pictures into monthwise subdirectories

 rename -p -MImage::EXIF '$_ = "$1-$2/$_" if Image::EXIF->new->file_name($_)
   ->get_image_info->{"Image Created"} =~ /(\d\d\d\d):(\d\d)/' *.jpeg

See L<Image::EXIF>.

=head1 SEE ALSO

mv(1), perl(1), find(1), grep(1), sort(1)

=head1 BUGS

None currently known.

=head1 AUTHORS

Aristotle Pagaltzis

Idea, inspiration and original code from Larry Wall and Robin Barker.

=head1 COPYRIGHT

This script is free software; you can redistribute it and/or modify it under the same terms as Perl itself.
